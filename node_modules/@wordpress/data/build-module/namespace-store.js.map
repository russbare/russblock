{"version":3,"sources":["@wordpress/data/src/namespace-store.js"],"names":["createStore","applyMiddleware","flowRight","get","mapValues","promise","createResolversCacheMiddleware","createNamespace","key","options","registry","reducer","store","createReduxStore","selectors","actions","resolvers","mapActions","mapSelectors","fulfillment","getCoreDataFulfillment","result","mapResolvers","getSelectors","getActions","subscribe","listener","lastState","getState","state","hasChanged","enhancers","window","__REDUX_DEVTOOLS_EXTENSION__","push","name","instanceId","initialState","createStateSelector","registeredSelector","selector","isRegistrySelector","select","runSelector","argsLength","arguments","length","args","Array","i","createBoundAction","action","dispatch","mapSelector","selectorName","resolver","fulfillSelector","isFulfilled","hasStarted","start","fulfill","finish","mappedResolvers","resolverFulfill","hasStartedResolution","startResolution","finishResolution","fulfillWithRegistry","namespace","stores"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport {\n\tflowRight,\n\tget,\n\tmapValues,\n} from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport promise from './promise-middleware';\nimport createResolversCacheMiddleware from './resolvers-cache-middleware';\n\n/**\n * Creates a namespace object with a store derived from the reducer given.\n *\n * @param {string} key              Identifying string used for namespace and redex dev tools.\n * @param {Object} options          Contains reducer, actions, selectors, and resolvers.\n * @param {Object} registry         Registry reference.\n *\n * @return {Object} Store Object.\n */\nexport default function createNamespace( key, options, registry ) {\n\tconst reducer = options.reducer;\n\tconst store = createReduxStore( key, options, registry );\n\n\tlet selectors, actions, resolvers;\n\tif ( options.actions ) {\n\t\tactions = mapActions( options.actions, store );\n\t}\n\tif ( options.selectors ) {\n\t\tselectors = mapSelectors( options.selectors, store, registry );\n\t}\n\tif ( options.resolvers ) {\n\t\tconst fulfillment = getCoreDataFulfillment( registry, key );\n\t\tconst result = mapResolvers( options.resolvers, selectors, fulfillment, store );\n\t\tresolvers = result.resolvers;\n\t\tselectors = result.selectors;\n\t}\n\n\tconst getSelectors = () => selectors;\n\tconst getActions = () => actions;\n\n\t// Customize subscribe behavior to call listeners only on effective change,\n\t// not on every dispatch.\n\tconst subscribe = store && function( listener ) {\n\t\tlet lastState = store.getState();\n\t\tstore.subscribe( () => {\n\t\t\tconst state = store.getState();\n\t\t\tconst hasChanged = state !== lastState;\n\t\t\tlastState = state;\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tlistener();\n\t\t\t}\n\t\t} );\n\t};\n\n\t// This can be simplified to just { subscribe, getSelectors, getActions }\n\t// Once we remove the use function.\n\treturn {\n\t\treducer,\n\t\tstore,\n\t\tactions,\n\t\tselectors,\n\t\tresolvers,\n\t\tgetSelectors,\n\t\tgetActions,\n\t\tsubscribe,\n\t};\n}\n\n/**\n * Creates a redux store for a namespace.\n *\n * @param {string} key      Part of the state shape to register the\n *                          selectors for.\n * @param {Object} options  Registered store options.\n * @param {Object} registry Registry reference, for resolver enhancer support.\n *\n * @return {Object} Newly created redux store.\n */\nfunction createReduxStore( key, options, registry ) {\n\tconst enhancers = [\n\t\tapplyMiddleware( createResolversCacheMiddleware( registry, key ), promise ),\n\t];\n\tif ( typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ) {\n\t\tenhancers.push( window.__REDUX_DEVTOOLS_EXTENSION__( { name: key, instanceId: key } ) );\n\t}\n\n\tconst { reducer, initialState } = options;\n\treturn createStore( reducer, initialState, flowRight( enhancers ) );\n}\n\n/**\n * Maps selectors to a redux store.\n *\n * @param {Object} selectors  Selectors to register. Keys will be used as the\n *                            public facing API. Selectors will get passed the\n *                            state as first argument.\n * @param {Object} store      The redux store to which the selectors should be mapped.\n * @param {Object} registry   Registry reference.\n *\n * @return {Object}           Selectors mapped to the redux store provided.\n */\nfunction mapSelectors( selectors, store, registry ) {\n\tconst createStateSelector = ( registeredSelector ) => {\n\t\tconst selector = registeredSelector.isRegistrySelector ? registeredSelector( registry.select ) : registeredSelector;\n\n\t\treturn function runSelector() {\n\t\t\t// This function is an optimized implementation of:\n\t\t\t//\n\t\t\t//   selector( store.getState(), ...arguments )\n\t\t\t//\n\t\t\t// Where the above would incur an `Array#concat` in its application,\n\t\t\t// the logic here instead efficiently constructs an arguments array via\n\t\t\t// direct assignment.\n\t\t\tconst argsLength = arguments.length;\n\t\t\tconst args = new Array( argsLength + 1 );\n\t\t\targs[ 0 ] = store.getState();\n\t\t\tfor ( let i = 0; i < argsLength; i++ ) {\n\t\t\t\targs[ i + 1 ] = arguments[ i ];\n\t\t\t}\n\n\t\t\treturn selector( ...args );\n\t\t};\n\t};\n\n\treturn mapValues( selectors, createStateSelector );\n}\n\n/**\n * Maps actions to dispatch from a given store.\n *\n * @param {Object} actions    Actions to register.\n * @param {Object} store      The redux store to which the actions should be mapped.\n * @return {Object}           Actions mapped to the redux store provided.\n */\nfunction mapActions( actions, store ) {\n\tconst createBoundAction = ( action ) => ( ...args ) => store.dispatch( action( ...args ) );\n\treturn mapValues( actions, createBoundAction );\n}\n\n/**\n * Returns resolvers with matched selectors for a given namespace.\n * Resolvers are side effects invoked once per argument set of a given selector call,\n * used in ensuring that the data needs for the selector are satisfied.\n *\n * @param {Object} resolvers   Resolvers to register.\n * @param {Object} selectors   The current selectors to be modified.\n * @param {Object} fulfillment Fulfillment implementation functions.\n * @param {Object} store       The redux store to which the resolvers should be mapped.\n * @return {Object}            An object containing updated selectors and resolvers.\n */\nfunction mapResolvers( resolvers, selectors, fulfillment, store ) {\n\tconst mapSelector = ( selector, selectorName ) => {\n\t\tconst resolver = resolvers[ selectorName ];\n\t\tif ( ! resolver ) {\n\t\t\treturn selector;\n\t\t}\n\n\t\treturn ( ...args ) => {\n\t\t\tasync function fulfillSelector() {\n\t\t\t\tconst state = store.getState();\n\t\t\t\tif ( typeof resolver.isFulfilled === 'function' && resolver.isFulfilled( state, ...args ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( fulfillment.hasStarted( selectorName, args ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfulfillment.start( selectorName, args );\n\t\t\t\tawait fulfillment.fulfill( selectorName, ...args );\n\t\t\t\tfulfillment.finish( selectorName, args );\n\t\t\t}\n\n\t\t\tfulfillSelector( ...args );\n\t\t\treturn selector( ...args );\n\t\t};\n\t};\n\n\tconst mappedResolvers = mapValues( resolvers, ( resolver ) => {\n\t\tconst { fulfill: resolverFulfill = resolver } = resolver;\n\t\treturn { ...resolver, fulfill: resolverFulfill };\n\t} );\n\n\treturn {\n\t\tresolvers: mappedResolvers,\n\t\tselectors: mapValues( selectors, mapSelector ),\n\t};\n}\n\n/**\n * Bundles up fulfillment functions for resolvers.\n * @param {Object} registry     Registry reference, for fulfilling via resolvers\n * @param {string} key          Part of the state shape to register the\n *                              selectors for.\n * @return {Object}             An object providing fulfillment functions.\n */\nfunction getCoreDataFulfillment( registry, key ) {\n\tconst { hasStartedResolution } = registry.select( 'core/data' );\n\tconst { startResolution, finishResolution } = registry.dispatch( 'core/data' );\n\n\treturn {\n\t\thasStarted: ( ...args ) => hasStartedResolution( key, ...args ),\n\t\tstart: ( ...args ) => startResolution( key, ...args ),\n\t\tfinish: ( ...args ) => finishResolution( key, ...args ),\n\t\tfulfill: ( ...args ) => fulfillWithRegistry( registry, key, ...args ),\n\t};\n}\n\n/**\n * Calls a resolver given arguments\n *\n * @param {Object} registry     Registry reference, for fulfilling via resolvers\n * @param {string} key          Part of the state shape to register the\n *                              selectors for.\n * @param {string} selectorName Selector name to fulfill.\n * @param {Array} args         Selector Arguments.\n */\nasync function fulfillWithRegistry( registry, key, selectorName, ...args ) {\n\tconst namespace = registry.stores[ key ];\n\tconst resolver = get( namespace, [ 'resolvers', selectorName ] );\n\tif ( ! resolver ) {\n\t\treturn;\n\t}\n\n\tconst action = resolver.fulfill( ...args );\n\tif ( action ) {\n\t\tawait namespace.store.dispatch( action );\n\t}\n}\n"]}