{"version":3,"sources":["@wordpress/data/src/store/actions.js"],"names":["startResolution","reducerKey","selectorName","args","type","finishResolution","invalidateResolution","invalidateResolutionForStore","invalidateResolutionForStoreSelector"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAASA,eAAT,CAA0BC,UAA1B,EAAsCC,YAAtC,EAAoDC,IAApD,EAA2D;AACjE,SAAO;AACNC,IAAAA,IAAI,EAAE,kBADA;AAENH,IAAAA,UAAU,EAAVA,UAFM;AAGNC,IAAAA,YAAY,EAAZA,YAHM;AAINC,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;;;AAUA,OAAO,SAASE,gBAAT,CAA2BJ,UAA3B,EAAuCC,YAAvC,EAAqDC,IAArD,EAA4D;AAClE,SAAO;AACNC,IAAAA,IAAI,EAAE,mBADA;AAENH,IAAAA,UAAU,EAAVA,UAFM;AAGNC,IAAAA,YAAY,EAAZA,YAHM;AAINC,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;;AASA,OAAO,SAASG,oBAAT,CAA+BL,UAA/B,EAA2CC,YAA3C,EAAyDC,IAAzD,EAAgE;AACtE,SAAO;AACNC,IAAAA,IAAI,EAAE,uBADA;AAENH,IAAAA,UAAU,EAAVA,UAFM;AAGNC,IAAAA,YAAY,EAAZA,YAHM;AAINC,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;AAQA,OAAO,SAASI,4BAAT,CAAuCN,UAAvC,EAAoD;AAC1D,SAAO;AACNG,IAAAA,IAAI,EAAE,iCADA;AAENH,IAAAA,UAAU,EAAVA;AAFM,GAAP;AAIA;AAED;;;;;;;;;;;AAUA,OAAO,SAASO,oCAAT,CACNP,UADM,EAENC,YAFM,EAGL;AACD,SAAO;AACNE,IAAAA,IAAI,EAAE,0CADA;AAENH,IAAAA,UAAU,EAAVA,UAFM;AAGNC,IAAAA,YAAY,EAAZA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * Returns an action object used in signalling that selector resolution has\n * started.\n *\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Name of selector for which resolver triggered.\n * @param {...*}   args         Arguments to associate for uniqueness.\n *\n * @return {Object} Action object.\n */\nexport function startResolution( reducerKey, selectorName, args ) {\n\treturn {\n\t\ttype: 'START_RESOLUTION',\n\t\treducerKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that selector resolution has\n * completed.\n *\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Name of selector for which resolver triggered.\n * @param {...*}   args         Arguments to associate for uniqueness.\n *\n * @return {Object} Action object.\n */\nexport function finishResolution( reducerKey, selectorName, args ) {\n\treturn {\n\t\ttype: 'FINISH_RESOLUTION',\n\t\treducerKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that we should invalidate the resolution cache.\n *\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Name of selector for which resolver should be invalidated.\n * @param {Array}  args         Arguments to associate for uniqueness.\n *\n * @return {Object} Action object.\n */\nexport function invalidateResolution( reducerKey, selectorName, args ) {\n\treturn {\n\t\ttype: 'INVALIDATE_RESOLUTION',\n\t\treducerKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the resolution cache for a\n * given reducerKey should be invalidated.\n *\n * @param {string} reducerKey Registered store reducer key.\n *\n * @return {Object} Action object.\n */\nexport function invalidateResolutionForStore( reducerKey ) {\n\treturn {\n\t\ttype: 'INVALIDATE_RESOLUTION_FOR_STORE',\n\t\treducerKey,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the resolution cache for a\n * given reducerKey and selectorName should be invalidated.\n *\n * @param {string} reducerKey   Registered store reducer key.\n * @param {string} selectorName Name of selector for which all resolvers should\n *                              be invalidated.\n *\n * @return  {Object} Action object.\n */\nexport function invalidateResolutionForStoreSelector(\n\treducerKey,\n\tselectorName\n) {\n\treturn {\n\t\ttype: 'INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR',\n\t\treducerKey,\n\t\tselectorName,\n\t};\n}\n"]}