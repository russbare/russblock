{"version":3,"sources":["@wordpress/data/src/store/reducer.js"],"names":["subKeysIsResolved","state","EquivalentKeyMap","action","type","isStarting","nextState","set","args","delete","isResolved","reducerKey","selectorName"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AATA;;;;AAMA;;;;AAKA;;;;;;;;;;;AAWA,IAAMA,iBAAiB,GAAG,uBAAW,CACpC,qBAAU,YAAV,CADoC,EAEpC,qBAAU,cAAV,CAFoC,CAAX,EAGrB,YAA8C;AAAA,MAA5CC,KAA4C,uEAApC,IAAIC,yBAAJ,EAAoC;AAAA,MAAZC,MAAY;;AAClD,UAASA,MAAM,CAACC,IAAhB;AACC,SAAK,kBAAL;AACA,SAAK,mBAAL;AAA0B;AACzB,YAAMC,UAAU,GAAGF,MAAM,CAACC,IAAP,KAAgB,kBAAnC;AACA,YAAME,SAAS,GAAG,IAAIJ,yBAAJ,CAAsBD,KAAtB,CAAlB;AACAK,QAAAA,SAAS,CAACC,GAAV,CAAeJ,MAAM,CAACK,IAAtB,EAA4BH,UAA5B;AACA,eAAOC,SAAP;AACA;;AACD,SAAK,uBAAL;AAA8B;AAC7B,YAAMA,UAAS,GAAG,IAAIJ,yBAAJ,CAAsBD,KAAtB,CAAlB;;AACAK,QAAAA,UAAS,CAACG,MAAV,CAAkBN,MAAM,CAACK,IAAzB;;AACA,eAAOF,UAAP;AACA;AAZF;;AAcA,SAAOL,KAAP;AACA,CAnByB,CAA1B;AAqBA;;;;;;;;;;;AAUA,IAAMS,UAAU,GAAG,SAAbA,UAAa,GAA0B;AAAA,MAAxBT,KAAwB,uEAAhB,EAAgB;AAAA,MAAZE,MAAY;;AAC5C,UAASA,MAAM,CAACC,IAAhB;AACC,SAAK,iCAAL;AACC,aAAO,iBAAKH,KAAL,EAAYE,MAAM,CAACQ,UAAnB,IACN,kBAAMV,KAAN,EAAa,CAAEE,MAAM,CAACQ,UAAT,CAAb,CADM,GAENV,KAFD;;AAGD,SAAK,0CAAL;AACC,aAAO,iBAAKA,KAAL,EAAY,CAAEE,MAAM,CAACQ,UAAT,EAAqBR,MAAM,CAACS,YAA5B,CAAZ,oCAEFX,KAFE,oCAGHE,MAAM,CAACQ,UAHJ,EAGkB,kBACtBV,KAAK,CAAEE,MAAM,CAACQ,UAAT,CADiB,EAEtB,CAAER,MAAM,CAACS,YAAT,CAFsB,CAHlB,KAQNX,KARD;;AASD,SAAK,kBAAL;AACA,SAAK,mBAAL;AACA,SAAK,uBAAL;AACC,aAAOD,iBAAiB,CAAEC,KAAF,EAASE,MAAT,CAAxB;AAlBF;;AAoBA,SAAOF,KAAP;AACA,CAtBD;;eAwBeS,U","sourcesContent":["/**\n * External dependencies\n */\nimport { flowRight, omit, has } from 'lodash';\nimport EquivalentKeyMap from 'equivalent-key-map';\n\n/**\n * Internal dependencies\n */\nimport { onSubKey } from './utils';\n\n/**\n * Reducer function returning next state for selector resolution of\n * subkeys, object form:\n *\n *  reducerKey -> selectorName -> EquivalentKeyMap<Array,boolean>\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @returns {Object} Next state.\n */\nconst subKeysIsResolved = flowRight( [\n\tonSubKey( 'reducerKey' ),\n\tonSubKey( 'selectorName' ),\n] )( ( state = new EquivalentKeyMap(), action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'START_RESOLUTION':\n\t\tcase 'FINISH_RESOLUTION': {\n\t\t\tconst isStarting = action.type === 'START_RESOLUTION';\n\t\t\tconst nextState = new EquivalentKeyMap( state );\n\t\t\tnextState.set( action.args, isStarting );\n\t\t\treturn nextState;\n\t\t}\n\t\tcase 'INVALIDATE_RESOLUTION': {\n\t\t\tconst nextState = new EquivalentKeyMap( state );\n\t\t\tnextState.delete( action.args );\n\t\t\treturn nextState;\n\t\t}\n\t}\n\treturn state;\n} );\n\n/**\n * Reducer function returning next state for selector resolution, object form:\n *\n *   reducerKey -> selectorName -> EquivalentKeyMap<Array, boolean>\n *\n * @param {Object} state   Current state.\n * @param {Object} action  Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst isResolved = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'INVALIDATE_RESOLUTION_FOR_STORE':\n\t\t\treturn has( state, action.reducerKey ) ?\n\t\t\t\tomit( state, [ action.reducerKey ] ) :\n\t\t\t\tstate;\n\t\tcase 'INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR':\n\t\t\treturn has( state, [ action.reducerKey, action.selectorName ] ) ?\n\t\t\t\t{\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.reducerKey ]: omit(\n\t\t\t\t\t\tstate[ action.reducerKey ],\n\t\t\t\t\t\t[ action.selectorName ]\n\t\t\t\t\t),\n\t\t\t\t} :\n\t\t\t\tstate;\n\t\tcase 'START_RESOLUTION':\n\t\tcase 'FINISH_RESOLUTION':\n\t\tcase 'INVALIDATE_RESOLUTION':\n\t\t\treturn subKeysIsResolved( state, action );\n\t}\n\treturn state;\n};\n\nexport default isResolved;\n"]}